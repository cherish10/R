facebook_nouns[1]
myCorpus<-Corpus(VectorSource(facebook_nouns))
myCorpus
myCorpusPrepro<-tm_map(myCorpus,removePunctuation)
myCorpusPrepro<-tm_map(myCorpusPrepro,removeNumbers)
myCorpusPrepro<-tm_map(myCorpusPrepro,tolower)
myCorpusPrepro<-tm_map(myCorpusPrepro,removeWords,stopwords('english'))
inspect(myCorpusPrepro[1:5])
myCorpusPrepro_term<-
TermDocumentMatrix(myCorpusPrepro,
control = list(wordLenghts = c(4,16)))
myCorpusPrepro_term
myTerm_df<-as.data.frame(as.matrix(myCorpusPrepro_term))
dim(myTerm_df)
wordResult<-sort(rowSums(myTerm_df),decreasing = TRUE)
wordResult[1:10]
myCorpusPrepro<-tm_map(myCorpus,removePunctuation)
myCorpusPrepro<-tm_map(myCorpusPrepro,tolower)
myStopwords = c(stopwords('english'),"사용","하기");
myCorpusPrepro<-tm_map(myCorpusPrepro,removeWords,myStopwords)
myCorpusPrepro_term<-
TermDocumentMatrix(myCorpusPrepro,
control = list(wordLenghts = c(4,16)))
myTerm_df<-as.data.frame(as.matrix(myCorpusPrepro_term))
wordResult<-sort(rowSums(myTerm_df),decreasing = TRUE)
wordResult
myName<- names(wordResult)
word.df<-data.frame(word=myName,freq = wordResult)
str(word.df)
pal<-brewer.pal(12,"paired")
pal<-brewer.pal(12,"Paired")
wordcloud(word.df$word,word.df$freq,scale = c(5,1),
min.freq = 3,random.order = F,
rot.per = .1, colors = pal,family="malgun")
marketing<-file("C:/Users/user/Desktop/Rcs/Rwork-2nd/Part-II/marketing.txt",
encoding = "UTF-8")
marketing2 <-readLines(marketing)
close(marketing)
head(marketing)
head(marketing2)
lword<-map(extractNoun,marketing2)
lword<-Map(extractNoun,marketing2)
length(lword)
lword<-unique(lword)
lenght(lword)
length(lword)
lword <-sapply(lword,unique)
length(lword)
lword
filter1<-function(x){
nchar(x)<= 4 && nchar(x) >=2 && is.hangul(x)
}
filter2<-function(x){Filter(filter1,x)}
lword<-sapply(lword,filter2)
lword
word <- list(c("홍길동","이순","만기","김"),
c("대한민국","우리나라대한민국","한국","resu"))
class(word)
filter1 <-function(x){
nchar(x) <=4 && nchar(x) >= 2 && is.hangul(x)
}
filter2 <-function(x){
Filter(filter1,x)
}
filterword <- sapply(word,filter2)
filterword
wordtran<-as(lword,"tranctions")
install.packages("arules")
library(arules)
wordtran<-as(lword,"tranctions")
wordtran<-as(lword,"transactions")
wordtran
tranrules<-apriori(wordtran,
parameter = list(supp=0.25,conf = 0.05))
inspect(tranrules)
data("Adult")
Adult
str(Adult)
dim(Adult)
inspect(Adult)
aprl<-apriori(Adult,
parameter = list(support= 0.1, target="frequent"),
appearance = list(none=
c("income=small","income=large"),
default="both"))
aprl
inspect(aprl)
apr2 <-apriori(Adult,
parameter = list(support=0.1,targer="rules"),
appearance = list(none=
c("income=small","income=large"),
default="both"))
apr2 <-apriori(Adult,
parameter = list(support=0.1,target="rules"),
appearance = list(none=
c("income=small","income=large"),
default="both"))
apr2
apr3 <-apriori(Adult,
parameter = list(supp=0.5, conf= 0.9, target="rules"),
appearance = list(none=
c("income=small","income=large"),
default="both"))
apr3
data("Adult")
rules<-apriori(Adult)
inspect(rules[10])
rules<-labels(tranrules,ruleSep=" ")
rules
rules<-sapply(rules,strsplit," ",USE.NAMES = F)
rules
rulemat<-do.call("rbind",rules)
class(rulemat)
ruleg<-graph.edgelist(rulemat[c(12:59),],directed = F)
install.packages("igraph")
library(igraph)
ruleg<-graph.edgelist(rulemat[c(12:59),],directed = F)
ruleg
plot.igraph(ruleg,vertex,label = V(ruleg)$name,
vertex.label.cex = 1.2, vertex.label.color='black',
vertex,size = 20, vertex.color='green',
vertex.frame.color = 'blue')
plot.igraph(ruleg,vertex.label = V(ruleg)$name,
vertex.label.cex = 1.2, vertex.label.color='black',
vertex.size = 20, vertex.color='green',
vertex.frame.color = 'blue')
vertex.frame.color = "red')
vertex.frame.color = "blue')
vertex.frame.color = "blue')
plot.igraph(ruleg,vertex.label = V(ruleg)$name,
vertex.label.cex = 1.2, vertex.label.color='black',
vertex.size = 20, vertex.color='green',
vertex.frame.color = "blue')
plot.igraph(ruleg,vertex.label = V(ruleg)$name,
vertex.label.cex = 1.2, vertex.label.color='black',
vertex.size = 20, vertex.color='green',
vertex.frame.color = "blue")
plot.igraph(ruleg,vertex.label = V(ruleg)$name,
vertex.label.cex = 1.2, vertex.label.color='black',
vertex.size = 20, vertex.color='green',
vertex.frame.color = "red")
barplot(rivers,beside = T,col = 'skyblue',xlab = "miles")
histogram(miles,data = rivers)
library(lattice)
histogram(miles,data = rivers)
data(rivers)
mode(rivers)
str(rivers)
str(rivers)
mode(rivers)
data(rivers)
barplot(rivers,beside = T,col = 'skyblue',xlab = "miles")
library(lattice)
histogram(miles,data = rivers)
setwd("C:/Users/user/Desktop/Rcs")
data<-read.csv("monin.csv",header = T)
head(data)
barplot(data,ylim =c(0,15000),
col = rep("red","pink"))
data(monin)
barplot(monin.csv,ylim =c(0,15000),
col = rep("red","pink"))
barplot("monin.csv",ylim =c(0,15000),
col = rep("red","pink"))
barplot(data,beside = F,col = rainbow(2),
ylab = "발표건수",
main = "문인잡지의 작품 발표 현황")
legend(19,71,c("2016","2017"),cex = 0.8,fill = rainbow(2))
str(data)
barplot(data$구분,ylim =c(0,15000),
col = rep("red","pink"))
barplot(data,ylim =c(0,15000),
col = rep("red","pink"))
barplot(data$구분)
barplot(data$시)
barplot(data,ylim =c(0,15000),
col = rainbow(2))
head(diamonds)
library(ggplot2)
head(diamonds)
ds<-head
ds
ds<-diamonds
ds
p<-ggplot(diamonds,aes(cut))
p+stat_bin(aes(fill=cut),geom = "bar")
p+stat_bin(aes(fill=pink),geom = "bar")
p+stat_bin(aes(fill=carat),geom = "bar")
histogram(miles|data = rivers)
str(rivers)
mode(rivers)
data(rivers)
barplot(rivers,beside = T,col = 'skyblue',xlab = "miles")
library(lattice)
histogram(miles|data = rivers)
histogram(miles|data)
vec1<-rep("R",each=5)
vec1<-rep("R",each=5)
vec1
barplot(rivers,breaks=6,beside = T,col = 'skyblue',xlab = "miles")
vec2<-seq(1,10,3)
vec1<-rep("R",each=5)
vec1
vec2<-seq(1,10,3)
vec2
vec3<-rep(vec2,each=3)
vec3
hist(rivers,breaks=6,col = 'skyblue',xlab = "miles",border='navy')
par(mfrow = c(1,3))
hist(~Girth,data = trees)
histogram(~Girth,data = trees)
histogram(~Height,data = trees)
histogram(~Volume,data = trees)
histogram(~Girth|percent of total,data = trees)
histogram(~Girth|percent,data = trees)
histogram(~Girth|percentoftotal,data = trees)
layout = c(1,3)
histogram(~Girthl,data = trees)
vec4<-c(vec2,vec3)
vec4
seq(25,15,5)
seq(25,-15,-5)
vec5<-vec4(seq(1,16,2))
vec5<-vec4[seq(1,16,2)]
vec5
name<-c("최민수","유관순","이순신","김유신","홍길동")
age<-c(55,45,45,53,15)
gender<-c(1,2,1,1,1)
job<-c("연예인","주부","군인","직장인","학생")
sat<-c(3,4,2,5,5)
grade<-c("C","C","A","D","A")
total<-c(44.4,28.5,43.5,NA,27.1)
user<-data.frame(name,age,gender,job,sat,grade,total0)
user<-data.frame(name,age,gender,job,sat,grade,total)
histogram(user$gender)
user2<-user[seq(2,6,2)]
user2
kor<-c(90,85,90)
eng<-c(70,85,75)
mat<-c(86,92,88)
Date<-data.frame(kor,eng,mat)
Date
apply(Data,1,max)
apply(Date,1,max)
apply(Date,2,max)
round(apply(Date,1,mean),2)
round(apply(Date,2,mean),2)
apply(Date,1,var)
apply(Date,1,sd)
Data2<-c("2017-02-05 수입3000원",
"2017-02-06 수입4500원",
"2017-02-07 수입2500원")
library(stringr)
str_extract_all(Data2,"[가-히]","[1-9]{4}")
str_extract_all(Data2,"[가-히][1-9]{4}")
str_extract_all(Data2,"[0-9]{4}[가-히]")
setwd("C:/Users/user/Desktop/Rcs")
data<-read.csv("monin.csv",header = T)
head(data)
barplot(data,ylim =c(0,15000),
col = rainbow(2))
barplot(data,beside = F,col = rainbow(2),
ylab = "발표건수",
main = "문인잡지의 작품 발표 현황")
head(data)
barplot(as.matrix(data),beside = F,col = rainbow(2),
ylab = "발표건수",
main = "문인잡지의 작품 발표 현황")
layout = c(1,1)
barplot(as.matrix(data),beside = F,col = rainbow(2),
ylab = "발표건수",
main = "문인잡지의 작품 발표 현황")
dev.off()
barplot(as.matrix(data),beside = F,col = rainbow(2),
ylab = "발표건수",
main = "문인잡지의 작품 발표 현황")
layout = c(1,3)
barplot(trees$Girth)
barplot(trees$Height)
barplot(trees$Volume)
barplot(as.matrix(data),beside = F,col = rainbow(2),
ylab = "발표건수",
main = "문인잡지의 작품 발표 현황")
data<-read.csv("monin.csv",header = T)
head(data)
barplot(as.matrix(data),beside = F,col = rainbow(2),
ylab = "발표건수",
main = "문인잡지의 작품 발표 현황")
legend(19,71,c("2016","2017"),cex = 0.8,fill = rainbow(2))
x<-2016
hist(Data2)
paste(Data2,cpllapse=",")
paste(Data2,cpllapse=',')
paste(Data2,cpllapse=",")
data(trees)
str(trees)
df<-as.data.frame(trees)
str(df)
df
layout = c(1,3)
barplot(trees$Girth)
barplot(trees$Height)
barplot(trees$Volume)
setwd("C:/Users/user/Desktop/Rcs/Rwork/output")
st.df<-titanic.txt
titanic.txt
titanic
write.csv(titanic,"C:/Users/user/Desktop/Rcs/Rwork/output/titanic.csv")
write.csv(titanic.txt,"C:/Users/user/Desktop/Rcs/Rwork/output/titanic.csv")
write.csv(titanic.txt,"C:/Users/user/Desktop/Rcs/Rwork/output/titanic.csv")
setwd("C:/Users/user/Desktop/Rcs")
Titanic
write.csv(titanic.txt,"C:/Users/user/Desktop/Rcs/Rwork/output/titanic.csv")
write.csv(Titanic.txt,"C:/Users/user/Desktop/Rcs/Rwork/output/titanic.csv")
write.csv(Titanic,"C:/Users/user/Desktop/Rcs/Rwork/output/titanic.csv")
titanicData<-read.csv("C:/Users/user/Desktop/Rcs/Rwork/output/titanic.csv")
str(titanicData)
head(titanicData-c(1,3))
head(titanicData,c(1,3))
head(titanicData, -c(1,3))
head(titanicData [, -c(1,3)])
data("CO2")
a<-(CO2$Treatment=='nonchilled')
write.csv(a,"C:/Users/user/Desktop/Rcs/CO2_df.csv")
a1<-(CO2$Treatment=='chilled')
write.csv(a1,"C:/User/user/Desktop/Rcs/CO2_df2.csv")
name<-c("유관순","홍길동","이순신","신사임당")
gender<-c("F","M","M","F")
price<-c(50,65,45,75)
client<-data.frame(name,gender,price)
if(price>=65){
cat("Best\n")
}else{
cat("Normal")
}
if(price>=65){
cat("Best\n")
}else{
cat("Normal")
}
price
price<-scan()
result<-price
ifelse(price>=65,"Best","Normal")
result<-ifelse(price>=65,"Best","Normal")
result
price<-c(50,65,45,75)
client<-data.frame(name,gender,price)
result<-ifelse(price>=65,"Best","Normal")
result
table(result)
EMP<-c("2014홍길동220","2002이순신300","2010유관순260")
apply(EMP,1,mean)
apply(EMP,mean)
mean(EMP)
e<-str_extract_all("[0-9]{3}")
e<-str_extract_all(EMP,"[0-9]{3}")
e
e<-str_extract_all(EMP,"[0-9]{4}")
e
e<-str_extract_all(EMP,"[0-9]{3}")
e
mean(e)
as.numeric(e)
mean(e)
vec<-as.numeric(e)
mean(vec)
e<-str_extract_all(EMP,'[0-9]{3}')
vec<-as.numeric(e)
epay[idx]<-vec
epay<-numeric()
idx<-1
e<-str_extract_all(EMP,'[0-9]{3}')
vec<-as.numeric(e)
library(stringr)
epay<-numeric()
ename<-character()
idx<-1
ename[idx]<-str_extract(n,'[가-히]{3}')
spay<-str_extract(n,'[가-히]{3}[0-9]{3}')
ename[idx]<-str_extract(n,'[가-히]{3}')
for(n in x){
ename[idx]<-str_extract(n,'[가-히]{3}')
spay<-str_extract(n,'[가-히]{3}[0-9]{3}')
}
for(n in x){
ename[idx]<-str_extract(n,'[가-히]{3}')
spay<-str_extract(n,'[가-히]{3}[0-9]{3}')
vec<-as.numeric(e)
}
spay<-str_replace(spay,'[가-히]{3}','')
vec<-as.numeric(spay)
epay[idx]<-vec
idx<-idx+1
for(n in x){
ename[idx]<-str_extract(n,'[가-히]{3}')
spay<-str_extract(n,'[가-히]{3}[0-9]{3}')
spay<-str_replace(spay,'[가-히]{3}','')
vec<-as.numeric(spay)
epay[idx]<-vec
idx<-idx+1
}
avg<-mean(epay)
cat('전체급여 평균:'avg)
cat('전체급여 평균:',avg)
EMP<-c("2014홍길동220","2002이순신300","2010유관순260")
emp_pay <-function(x){
library(stringr)
epay<-numeric()
ename<-character()
idx<-1
}
for(n in x){
ename[idx]<-str_extract(n,'[가-히]{3}')
spay<-str_extract(n,'[가-히]{3}[0-9]{3}')
spay<-str_replace(spay,'[가-히]{3}','')
vec<-as.numeric(spay)
epay[idx]<-vec
idx<-idx+1
}
avg<-mean(epay)
cat('전체급여 평균:',avg)
EMP<-c("2014홍길동220","2002이순신300","2010유관순260")
emp_pay <-function(x){
library(stringr)
epay<-numeric()
ename<-character()
idx<-1
for(n in x){
ename[idx]<-str_extract(n,'[가-히]{3}')
spay<-str_extract(n,'[가-히]{3}[0-9]{3}')
spay<-str_replace(spay,'[가-히]{3}','')
vec<-as.numeric(spay)
epay[idx]<-vec
idx<-idx+1
}
avg<-mean(epay)
cat('전체급여 평균:',avg)
}
emp_pay
cat('평균이상급여수령자')
emp_pay(EMP)
n<-1:length(x)
emp_pay <-function(x){
library(stringr)
epay<-numeric()
ename<-character()
idx<-1
for(n in x){
ename[idx]<-str_extract(n,'[가-히]{3}')
spay<-str_extract(n,'[가-히]{3}[0-9]{3}')
spay<-str_replace(spay,'[가-히]{3}','')
vec<-as.numeric(spay)
epay[idx]<-vec
idx<-idx+1
}
avg<-mean(epay)
cat('전체급여 평균:',avg,'\n')
cat('평균이상급여수령자','\n')
n<-1:length(x)
for(idx in n){
if(epay[idx]>=avg){
cat(ename[idx],'=>',epay[idx],'\n')
}
}
}
emp_pay(EMP)
library('RSADBE')
install.packages("RSADBE")
library('RSADBE')
data("Bug_Metrics_Software")
rowSums(Bug_Metrics_Software[,,1])
colMeans(Bug_Metrics_Software[,,1])
summary(Bug_Metrics_Software[,,1])
data("iris3")
str(iris3)
name(iris3)
names(iris3)
a<-1
b<-3
(f(b*3+4)-f(a*3+4))/(b-a)
function(x)
a<-1
b<-3
(f(b*3+4)-f(a*3+4))/(b-a)
((b*3+4)-(a*3+4))/(b-a)
data("iris3")
names(iris3)
str(iris3)
plot(iris3,main = "iris3 전체 데이터 셋의 분포현황")
plot(setosa,main="iris3 setosa 데이터 셋의 분포현황")
attributes(iris3)
plot(c(3,1),main="iris3 setosa 데이터 셋의 분포현황")
plot(iris3[c(3,1),1],main="iris3 setosa 데이터 셋의 분포현황")
plot(iris3[,c(3,1),1],main="iris3 setosa 데이터 셋의 분포현황")
plot(iris3[,c(3,2),2],main = "iris versicolor 데이터 셋의 분포현황")
plot(iris3[,c(3,3),3],main = "iris virgivica 데이터 셋의 분포현황")
data("iris")
str(iris)
library('RSADBE')
data("Bug_Metrics_Software")
rowSums(Bug_Metrics_Software[,,1])
colMeans(Bug_Metrics_Software[,,1])
summary(Bug_Metrics_Software[,,1])
data("iris3")
names(iris3)
attributes(iris3)
str(iris3)
plot(iris3,main = "iris3 전체 데이터 셋의 분포현황")
plot(iris3[,c(3,1),1],main="iris3 setosa 데이터 셋의 분포현황")
plot(iris3[,c(3,2),2],main = "iris versicolor 데이터 셋의 분포현황")
plot(iris3[,c(3,3),3],main = "iris virgivica 데이터 셋의 분포현황")
